selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   jet_nparticles > 1

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   part_mask: ak.ones_like(part_energy)
   part_pt: np.hypot(part_px, part_py)
   part_ptrel: part_pt/jet_pt
   part_pt_log: np.log(part_pt)
   part_e_log: np.log(part_energy)
   part_logptrel: np.log(part_pt/jet_pt)
   part_logerel: np.log(part_energy/jet_energy)
   part_deltaR: np.hypot(part_deta, part_dphi)
   part_isPositivelyChargedHadron: part_isChargedHadron & (part_charge > 0)
   part_isNegativelyChargedHadron: part_isChargedHadron & (part_charge < 0)
   part_isrealElectron: part_isElectron & (part_charge < 0)
   part_isPositron: part_isElectron & (part_charge > 0)
   part_isrealMuon: part_isMuon & (part_charge < 0)
   part_isAntiMuon: part_isMuon & (part_charge > 0)
   part_d0: np.tanh(part_d0val)
   part_dz: np.tanh(part_dzval)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.5

inputs:
   pmu:
      length: 128
      pad_mode: constant
      vars: 
         - [part_energy, null]
         - [part_px, null]
         - [part_py, null]
         - [part_pz, null]
   kin:
      length: 128
      pad_mode: constant
      vars: 
         - [part_ptrel, 0, 10]
         - [part_deta, null]
         - [part_dphi, null]
         - [part_pt_log, 1.7, 0.7]
         - [part_e_log, 2.0, 0.7]
         - [part_logptrel, -4.7, 0.7]
         - [part_logerel, -4.7, 0.7]
         - [part_deltaR, 0.2, 4.0]
   pid:
      length: 128
      pad_mode: constant
      vars: 
         - [part_isPositivelyChargedHadron, null]
         - [part_isNegativelyChargedHadron, null]
         - [part_isNeutralHadron, null]
         - [part_isPhoton, null]
         - [part_isrealElectron, null]
         - [part_isPositron, null]
         - [part_isrealMuon, null]
         - [part_isAntiMuon, null]
   dsp:
      length: 128
      pad_mode: constant
      vars: 
         - [part_d0, null]
         - [part_dz, null]     
   mask:
      length: 128
      pad_mode: constant
      vars: 
         - [part_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [label_QCD, label_Hbb, label_Hcc, label_Hgg, label_H4q, label_Hqql, label_Zqq, label_Wqq, label_Tbqq, label_Tbl]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: label.argmax(1)

observers:
   - jet_pt
   - jet_eta
   - jet_phi
   - jet_energy
   - jet_nparticles
   - jet_sdmass
   - jet_tau1
   - jet_tau2
   - jet_tau3
   - jet_tau4

weights:
